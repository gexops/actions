name: "Setup Github Actions"
description: Runs Series of Actions for Convenience
author: trisongz

inputs:
  
  username:
    description: "Username"
    required: false
  
  password:
    description: "Password"
    required: false
  
  harbor_registry:
    description: "Harbor Registry Endpoint"
    required: false
  
  harbor_username:
    description: "Harbor Registry Username"
    required: false
  
  harbor_password:
    description: "Harbor Registry Password"
    required: false
  
  aws_region:
    description: "AWS Region"
    required: false
    default: 'us-east-1'
  
  aws_access_key_id:
    description: "AWS Access Key ID"
    required: false
  
  aws_secret_access_key:
    description: "AWS Secret Access Key"
    required: false
  
  ecr_repository:
    description: "AWS ECR Repository"
    required: false

  ghcr_username:
    description: "GHCR username. Usually set from the github.actor variable"
    required: false

  ghcr_password:
    description: "GHCR password. Usually set from the secrets.GITHUB_TOKEN variable"
    required: false
  
  setup_docker:
    description: "Sets up Docker Context, QEMU and Buildx"
    required: false
    default: 'true'
  
  prepull_image:
    description: "Fetches an image prior to build"
    required: false
    default: ''
  
  checkout_fetch_depth:
    description: "Checkout Fetch Depth"
    required: false
  
  create_tag_target:
    description: "Creates Tag Target. Creates a Tag Target based on Branch such as v0.0.8-rc-xxx -> v0.0.8-rc-[datetimestr] if value is set as 'rc'"
    required: false
    default: ''

outputs:
  sha_short:
    description: "The short SHA used for image builds"
    value: ${{ steps.vars.outputs.sha_short }}
  ecr_repository_uri:
    description: URI of the repository, i.e. ACCOUNT.dkr.ecr.REGION.amazonaws.com/NAME
    value: ${{ steps.vars.outputs.create_ecr_repo }}
  tag_target:
    description: Creates a Tag Target based on Branch such as v0.0.8-rc-xxx -> v0.0.8-rc-[datetimestr]
    value: ${{ steps.tag-target.outputs.tag_target }}

runs:
  using: "composite"
  steps:
    - name: Checkout
      uses: actions/checkout@v2
      if: ${{ inputs.checkout_fetch_depth != null }}
      with:
        fetch-depth: ${{ inputs.checkout_fetch_depth }}
      
    - name: Checkout
      uses: actions/checkout@v2
      if: ${{ inputs.checkout_fetch_depth == null }}
      with:
        ref: ${{ github.ref }}

    - name: Get Short SHA
      id: vars
      run: |
        echo ::set-output name=sha_short::${GITHUB_SHA::7}
      shell: bash
    
    - uses: jungwinter/split@v2
      id: split-tag
      if: ${{ inputs.create_tag_target != '' && github.ref_name != 'main' }}
      with:
        msg: ${{ github.ref_name }}
        separator: '-'

    - name: Create Tag Target
      id: tag-target
      if: ${{ inputs.create_tag_target != '' && github.ref_name != 'main' }}
      continue-on-error: true
      run: echo "::set-output name=tag_target::${{ steps.split-tag.outputs._0 }}-${{ inputs.create_tag_target }}-$(date +%s)-$(git rev-parse --short HEAD)"
      shell: bash

    - name: Set up Docker Context for Buildx
      id: buildx-context
      if: ${{ inputs.setup_docker == 'true' }}
      continue-on-error: true
      run: |
        docker context create builders
      shell: bash

    - name: Set up QEMU
      if: ${{ inputs.setup_docker == 'true' }}
      continue-on-error: true
      uses: docker/setup-qemu-action@v1

    - name: Set up Docker Buildx
      if: ${{ inputs.setup_docker == 'true' }}
      continue-on-error: true
      uses: docker/setup-buildx-action@v2
      with:
        version: latest
        endpoint: builders
    
    - name: Login to DockerHub
      if: ${{ inputs.username != '' && inputs.password != '' }}
      uses: docker/login-action@v2
      with:
        username: ${{ inputs.username }}
        password: ${{ inputs.password }}

    - name: Login to Harbor
      uses: docker/login-action@v2
      if: ${{ inputs.harbor_username != '' && inputs.harbor_password != '' && inputs.harbor_registry != '' }}
      with:
        registry: ${{ inputs.harbor_registry }}
        username: ${{ inputs.harbor_username }}
        password: ${{ inputs.harbor_password }}

    - name: Login to GitHub Container Registry
      uses: docker/login-action@v2
      if: ${{ inputs.ghcr_username != '' && inputs.ghcr_password != '' }}
      with:
        registry: ghcr.io
        username: ${{ inputs.ghcr_username }}
        password: ${{ inputs.ghcr_password }}
    
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      if: ${{ inputs.aws_access_key_id != '' && inputs.aws_secret_access_key != '' }}
      with:
        aws-access-key-id: ${{ inputs.aws_access_key_id }}
        aws-secret-access-key: ${{ inputs.aws_secret_access_key }}
        aws-region: ${{ inputs.aws_region }}
    
    - name: Login to Amazon ECR
      id: login-to-ecr
      uses: aws-actions/amazon-ecr-login@v1
      if: ${{ inputs.aws_access_key_id != '' && inputs.aws_secret_access_key != '' }}
    
    - name: Create ECR Repo if not Exists
      uses: int128/create-ecr-repository-action@v1
      id: create_ecr_repo
      if: ${{ inputs.aws_access_key_id != '' && inputs.aws_secret_access_key != '' &&  inputs.ecr_repository != '' }}
      with:
        repository: ${{ inputs.ecr_repository }}
    
    - name: Prepull Docker Image
      id: prepull-docker-image
      if: ${{ inputs.prepull_image != '' && inputs.setup_docker == 'true' }}
      continue-on-error: true
      run: |
        docker pull ${{ inputs.prepull_image }}
      shell: bash
    
    